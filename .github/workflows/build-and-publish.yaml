name: Build and Publish
# Note: This workflow is based on https://packaging.python.org/en/latest/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows/

on:
  push:
    branches:
      - main

jobs:
  # Always run build
  build:
    name: Build distribution 📦
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      - name: Install pypa/build
        run: >-
          python3 -m
          pip install
          build
          --user
      - name: Build a binary wheel and a source tarball
        run: python3 -m build
      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

  # Only publish to PyPI on version bumps
  publish-to-pypi:
    name: >-
      Publish Python 🐍 distribution 📦 to PyPI
    # publish to PyPI on tag pushes or version bumps
    if: startsWith(github.ref, 'refs/tags/') || contains(github.event.head_commit.message, 'Bump version')
    needs:
      - build
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/inorbit-connector
    permissions:
      id-token: write
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Publish distribution 📦 to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  # Only sign and upload to GitHub Release after publishing to PyPI
  github-release:
    name: >-
      Sign the Python 🐍 distribution 📦 with Sigstore
      and upload them to GitHub Release
    needs:
      - publish-to-pypi
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Sign the dists with Sigstore
        uses: sigstore/gh-action-sigstore-python@v3.0.0
        with:
          inputs: >-
            ./dist/*.tar.gz
            ./dist/*.whl
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          # If triggered by a tag, use the tag name
          # If triggered by a version bump commit, extract version from commit message
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            # For tag triggers, validate the tag format
            if ! [[ "$GITHUB_REF_NAME" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "Error: Tag '$GITHUB_REF_NAME' does not follow the expected format"
              echo "Expected format: 'vX.Y.Z' (e.g., v1.0.0)"
              exit 1
            fi
            RELEASE_TAG="$GITHUB_REF_NAME"
          else
            # Validate commit message format
            if ! echo "${{ github.event.head_commit.message }}" | grep -q "Bump version: [0-9]\+\.[0-9]\+\.[0-9]\+ → [0-9]\+\.[0-9]\+\.[0-9]\+"; then
              echo "Error: Commit message does not follow the expected format"
              echo "Got: ${{ github.event.head_commit.message }}"
              echo "Expected format: 'Bump version: X.Y.Z → A.B.C'"
              exit 1
            fi
            
            # Extract the last version number from commit message (format: "Bump version: 1.0.1 → 1.1.0")
            VERSION=$(echo "${{ github.event.head_commit.message }}" | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+' | tail -n1)
            if [ -z "$VERSION" ]; then
              echo "Error: Could not extract version number from commit message: ${{ github.event.head_commit.message }}"
              echo "Expected format: 'Bump version: X.Y.Z → A.B.C'"
              exit 1
            fi
            RELEASE_TAG="v$VERSION"
          fi

          # Create or update the release
          if gh release view "$RELEASE_TAG" --repo "$GITHUB_REPOSITORY" >/dev/null 2>&1; then
            echo "Updating existing release $RELEASE_TAG"
            gh release edit "$RELEASE_TAG" --repo "$GITHUB_REPOSITORY" --notes ""
          else
            echo "Creating new release $RELEASE_TAG"
            gh release create "$RELEASE_TAG" --repo "$GITHUB_REPOSITORY" --notes ""
          fi

          # Save the release tag for the next step
          echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_ENV

      - name: Upload artifact signatures to GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          # Verify the release exists before uploading
          if ! gh release view "${{ env.RELEASE_TAG }}" --repo "$GITHUB_REPOSITORY" >/dev/null 2>&1; then
            echo "Error: Release ${{ env.RELEASE_TAG }} does not exist"
            exit 1
          fi

          # Upload to GitHub Release using the `gh` CLI.
          # `dist/` contains the built packages, and the
          # sigstore-produced signatures and certificates.
          echo "Uploading artifacts to release ${{ env.RELEASE_TAG }}"
          if ! gh release upload "${{ env.RELEASE_TAG }}" dist/** --repo "$GITHUB_REPOSITORY"; then
            echo "Error: Failed to upload artifacts to release ${{ env.RELEASE_TAG }}"
            exit 1
          fi
          echo "Successfully uploaded artifacts to release ${{ env.RELEASE_TAG }}"
